
esphome:
  name: phsensor

esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: ip
    gateway: gateway
    subnet: subnet

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "temp"
    password: "temp12345"

captive_portal:

# Enable logging
logger:
  level: WARN

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

web_server:
  version: 3

ota:
  - platform: esphome
    password: !secret ota_password

time:
  - platform: homeassistant

debug:
  update_interval: 30s

sensor:
  - platform: adc
    pin: A0
    id: ph_voltage_raw
    name: "pH Sensor Voltage"
    update_interval: 10s
    unit_of_measurement: "V"
    accuracy_decimals: 3
    filters:
      - median:
          window_size: 5
          send_every: 2
          send_first_at: 1

  - platform: template
    name: "pH Sensor"
    id: ph
    unit_of_measurement: "pH"
    accuracy_decimals: 2
    update_interval: 10s
    lambda: |-
      if (isnan(id(ph_voltage_raw).state)) return NAN;
      // Substitua pelos valores da sua calibragem
      float voltage = id(ph_voltage_raw).state;
      return 7.0 + (voltage - 0.57) * (4.0 - 7.0) / (0.65 - 0.57);

i2c:
  sda: D2
  scl: D1
  scan: false
  
display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    lambda: |-
      it.printf(0, 0, "pH: %.2f", id(ph).state);
      if (id(ph).has_state()) {
        float value = id(ph).state;
        if (value < 4) {
          it.print(0, 1, "Very acidic    ");
        } else if (value < 5) {
          it.print(0, 1, "Acidic         ");
        } else if (value < 7) {
          it.print(0, 1, "Acidic-ish     ");
        } else if (value < 8) {
          it.print(0, 1, "Neutral        ");
        } else if (value < 10) {
          it.print(0, 1, "Alkaline-ish   ");
        } else if (value < 11) {
          it.print(0, 1, "Alkaline       ");
        } else {
          it.print(0, 1, "Very alkaline  ");
        }
      }
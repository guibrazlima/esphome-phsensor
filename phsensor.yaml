esphome:
  name: phsensor
esp8266:
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.182
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.221

captive_portal:

# Enable logging with more detail during setup/calibration
logger:
  level: INFO  # Change to WARN after everything is working well

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key  # More secure with encryption

# Enable Over-the-Air updates
ota:
  - platform: esphome
    password: "d9721f23c4f72d99288d2047e59a3fda"

# Add a web interface for troubleshooting
web_server:
  version: 3

# Add time synchronization
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Lisbon

switch:
  - platform: restart
    name: "Restart phsensor"

sensor:
  # Diagnostic sensor to monitor ESP health
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s
    
  - platform: uptime
    name: "Uptime"
  
  
    
  #- platform: adc
  #  pin: VCC
  #  name: "VCC Voltage"
  #  update_interval: 60s

  # Raw voltage reading with extensive filtering

  - platform: adc
    pin: A0
    id: ph_raw_voltage
    name: "pH Raw Voltage"
    update_interval: 1s
    unit_of_measurement: "V"
    accuracy_decimals: 2

  - platform: template
    id: ph_voltage
    lambda: |-
      return id(ph_raw_voltage).state;
    name: "pH Voltage"
    update_interval: 1s
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - median:
          window_size: 15
          send_every: 5
          send_first_at: 5
      - exponential_moving_average:
          alpha: 0.1
          send_every: 5
      - throttle: 5s

  # Separate sensor with calibration applied
  - platform: template
    name: "pH Sensor"
    id: ph
    lambda: |-
      return id(ph_voltage).state;
    update_interval: 5s
    unit_of_measurement: "pH"
    device_class: "ph"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      # Measured voltage -> Actual pH (buffer solution)
      # Add your actual pH 9.18, 7.0, and 4.0 calibration values
      - calibrate_linear:
          - 0.57 -> 4.0  # Most acidic calibration point
          - 0.51 -> 7.0  # Neutral calibration point
          - 0.48 -> 9.2  # Most alkaline calibration point

# Text sensor to display pH status
text_sensor:
  - platform: template
    name: "pH Status"
    id: ph_status
    lambda: |-
      if (id(ph).state < 4) {
        return {"Muito Acido"};
      } else if (id(ph).state < 5) {
        return {"Acido"};
      } else if (id(ph).state < 7) {
        return {"Ligeiramente Acido"};
      } else if (id(ph).state < 8) {
        return {"Neutro"};
      } else if (id(ph).state < 10) {
        return {"Ligeiramente alcalino"};
      } else if (id(ph).state < 11) {
        return {"Alcalino"};
      } else {
        return {"Muito Alcalino"};
      }
    update_interval: 5s

  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    dns_address:
      name: ESP DNS Address

# I2C Configuration for display
i2c:
  sda: D2
  scl: D1
  scan: false
  
# Display configuration with improved layout
display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x3F  # May need to be adjusted based on your I2C scan results
    lambda: |-
      // Display time in top right corner
      //if (id(sntp_time).now().is_valid()) {
      //  it.printf(11, 1, "%02d:%02d", id(sntp_time).now().hour, id(sntp_time).now().minute);
      //}

      
      // Display pH value with more precise formatting
      if (id(ph).has_state()) {
        it.printf(0, 0, "pH:%.2f", id(ph).state);
        
        // Display pH status description
        it.print(0, 1, id(ph_status).state.c_str());
      
      } else {
        it.print(0, 0, "pH: Calibrar");
        it.print(0, 1, "Aguarde...");
      }

      // Display voltage on line 2
      if (id(ph_raw_voltage).has_state()) {
        it.printf(10, 0, "%.4f", id(ph_raw_voltage).state);
      } else {
        it.print(10, 0, "V:---");
      }

## Add button for calibration mode (future enhancement)
#binary_sensor:
#  - platform: gpio
#    pin:
#      number: D3
#      mode: INPUT_PULLUP
#    name: "Calibration Button"
#    id: cal_button
#    filters:
#      - delayed_on: 50ms
#      - delayed_off: 50ms

